 Copyright (c) 2015 Hans Toshihide TÃ¶rnqvist <hans.tornqvist@gmail.com>
 
 Permission to use, copy, modify, and distribute this software for any
 purpose with or without fee is hereby granted, provided that the above
 copyright notice and this permission notice appear in all copies.
 
 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


htest - C unit testing framework
--------------------------------

A small unit testing framework for ansi C, which compiles with very strict
flags in gcc.

My personal preferences for a testing framework follow my usual philosophy of
life:
 "The easier it is to fully understand every bit of a subject, the better.
  If the subject turns out to be easy to handle, bonus!"
This framework provides auto-registration of tests, descriptive output from
failed expressions, and signal testing. Everything else is kept to a minimum.

Below follows the typical layout of a test:
---

#include <htest/htest.h>

HTEST(SomeSuitableTestName)
{
  HTRY_...(expr);
}

HTEST_SUITE(SomeAppropriateSuiteName)
{
  /* Fixture setup. */
  HTEST_ADD(SomeSuitableTestName);
  /* Fixture tear down. */
}

---

A test consists of a (preferrably) small set of expressions and conditions
encapsulated by at least one HTRY_...() macro, and a suite consists of a set
of tests that belong together in some subjective sense. A suite is invoked for
every test, so the entry and exit of the suite can be used as fixture setup
and tear down for each test. That's all.

Command line arguments:
 -c Enable colored output.
 -f Suppress forking. Each test in every suite is forked to make sure broken
    code does not stop remaining tests. This option makes debugging easier.
 -h Prints usage and quits.
 -v Stops suppression of printing to stdout and stderr from tested code. Again
    makes debugging easier.


Good things to know
-------------------

There's no need to write a main() or list all suites to be included for
testing. The htest.mk makefile snippet will analyze the test source code after
the preprocessing stop and detect all suites, and libhtest.a contains main()
which will run all suites and their tests.

The tests are static functions and are therefore safe from name collisions
between different files. A properly configured compiler should also complain
about unused tests. Tests are not auto-registered, again to keep this
framework as simple as possible.


Test trials
-----------

HTRY(type, format, a, op, b)
 Binary comparison.
  type   - type of "a" and "b".
  format - printf directive for "a" and "b".
  a      - first operand.
  op     - operator.
  b      - second operand.
  e.g. HTRY(int, d, 0, !=, 1);

HTRY_I(a, op, b)
 Wrapper for HTRY(int, d, a, op, b).
Several other common primitive types are wrapped too, check htest.h for the
most up-to-date list.

HTRY_STR(a, op, b)
 String lexical comparison.
  a  - first operand.
  op - operator.
  b  - second operand.
 This will also check for NULL strings.

HTEST_VOID(expr)
 expr - expression that should run without signals. This only touches test
        function arguments to avoid compiler errors if no other trials are
        issued.

HTEST_SIGNAL(expr)
 expr - expression that is expected to signal one of the six ANSI signals.
	Note that this performs a fork and the result from this trial is lost
        for subsequent trials.
