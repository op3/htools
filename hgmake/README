 Copyright (c) 2015-2017 Hans Toshihide TÃ¶rnqvist <hans.tornqvist@gmail.com>

 Permission to use, copy, modify, and/or distribute this software for any
 purpose with or without fee is hereby granted, provided that the above
 copyright notice and this permission notice appear in all copies.

 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


hgmake - GNU make tools
=======================

A collection of tools and snippets to make building with GNU make
"comfortable". It's impossible to create a pretty build system, but this is my
least painful approach.

build_dir.mk     - Creates a reasonable build directory path if not set.
gcov.mk          - Gcov summary tools.
hconf.mk         - Hconf tools, for in-make build configuration.
strict_cflags.mk - Wonderful CFLAGS for good source code.

Each mk snipped contains information about inputs and outputs. As always:
RTFC >> RTFM.


hconf*
------
This requires a bit more than a one-liner description...

An "approach" to autoconfing things which tries to solve the following things:
 *) No separate phase.
    Everything is done with make, including use of dependency rules.
 *) Much simpler macro guards.
    Bye-bye to: #ifdef __linux__ && GNUC_BLABLA
    Hello to:   #if defined(HCONF_mMYMODULE_bMYBRANCH)
    hconf will test HCONF guards top-down until one compiles and optionally
    links perfectly.
 *) Production code rather than special test code tested, although a
    HCONFING_* macro is defined while configuring.

Overview of important project files:
 *) hconf.mk
    A bunch of commands and recipes for creating and using hconfs.
 *) <build_dir>/hconf_conf [-v] -d build-dir -i file -h hconf-file
    Scans for preprocessor modules and branches, tries to compile and link,
    and writes the results to an hconf file.
 *) <build_dir>/hconf_merge hconf-files...
    Merges flags from a list of hconf files to stdout.

How to create an hconf:ed file:

 *) Create a header file with switches:
    include/myheader.h:
#include <hconf/include/myheader.h>
#if defined(HCONF_mMY_MODULE_bMY_BRANCH_1)
#	include <string.h>
#elif defined(HCONF_mMY_MODULE_bDEUX)
/* HCONF_CPPFLAGS=-D_BSD_SOURCE */
#	include <string.h>
#elif defined(HCONF_mMY_MODULE_bSAN)
char *strndup(char const *, size_t);
#endif
/* Optional module-level test to be run by hconf. */
#if HCONFING_mMY_MODULE
HCONF_TEST(char *, (void))
{
	return strndup(0, 0);
}
#endif
/* Optional branch-level test. */
#if HCONFING_mMY_MODULE_bMY_BRANCH_1
...
#endif

 *) List hconf:able files and include hconf.mk:
    Makefile:
     HCONF_SRC=include/myheader.h
     include $(HTOOLS_PATH)/hgmake/hconf.mk
    In principle, this does:
     for i in $(HCONF_SRC); do
      ./hconf_conf [-v] -d $(BUILD_DIR) -i $i -h $(HCONF_CACHE)
      ./hconf_merge $(HCONF_CACHE) > $(HCONF_CACHE)
     done
    to create a big hconf file with merged compiler options.

 *) Create dependencies on hconf cache:
    Makefile:
     %.o: %.c Makefile $(HCONF_CACHE)

 *) You should get the chosen branches in a generated header file:
    $(BUILD_DIR)/hconf/include/myheader.h:
     #ifndef HCONF_INCLUDE_MYHEADER_H
     #define HCONF_INCLUDE_MYHEADER_H
     #define HCONF_mMY_MODULE_bDEUX
     #endif
 *) ... and compiler/linker flags in the hconf file for fun:
    $(BUILD_DIR)/hconf/include/myheader.hconf:
     ccache cc     # CC
     -D_BSD_SOURCE # CPPFLAGS
                   # CFLAGS
                   # LDFLAGS
                   # LIBS

 *) In order to use hconf results from another project, e.g. to use hutils:
    Makefile:
     HCONF_SRC:=...
     HCONF_EXT:=$(HTOOLS_PATH)/hutils
     include $(HTOOLS_PATH)/hgmake/hconf.mk

Notes:

*) hconf.mk should be included only once.

*) hconf.mk contains rules, so put your default rule before.

*) Branches are put into a generated header file rather than being given as
CPPFLAGS to reduce command line arguments.
