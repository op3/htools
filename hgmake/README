 Copyright (c) 2015-2016 Hans Toshihide TÃ¶rnqvist <hans.tornqvist@gmail.com>

 Permission to use, copy, modify, and/or distribute this software for any
 purpose with or without fee is hereby granted, provided that the above
 copyright notice and this permission notice appear in all copies.

 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


hbuild - Building tools
=======================

A collection of tools and snippets to make GNU make even more powerable. Note
that some constructs look old, but they are required for ancient platforms
that I want to support at work (GNU make 3.78, gcc 2.9 [mhm, not even 2.95]).


build_dir.mk
------------
Creates a nice build directory name.

include build_dir.mk
# BUILD_DIR now has the nice name.


cmds.mk
-------
Collection of useful command combos. Rather tied to hconf.


strict_cflags.mk
----------------
Good set of flags for GCC to keep you on your toes while programming.


hconf*
------
Ah yes, this is the magic that everybody needs.
Shell scripts and a makefile snippet to auto configure various parts of a
build. The basic principle is that a project auto configures its
headers/sources and stores global results in a hconf cache, but also
file-specific results. The global cache is read online to retrieve compiling
and linking, whereas the file-specific caches are included automatically
(given proper include paths of course). Global hconf cache files can be merged
together in other projects.

 *) hconf.mk
    Basic compiler and flag configuring, merging of hconf caches, and
    header/source auto configuring.
 *) hconf.sh
    Scans for preprocessor branches identified by "if defined(HCONF_*). The
    branches are tested top-down, so fallback branches should be organized
    towards the bottom.
 *) hconf_merge.sh
    Merges hconf cache files. The nature of the merging depends on the type of
    flags.

hconf cache file format:
 1: Compiler command, e.g. ccache gcc
 2: CPPFLAGS, e.g. -DDOH=pizza-dough -Ibatter
 3: CFLAGS, e.g. -ansi -pedantic (to start easy...)
 4: LDFLAGS, e.g. -Lcity-center
 5: LIBS, e.g. -lcommunity-center

As always, a concrete example:

MyMakefile:
    include $(HTOOLS)/hgmake/build_dir.mk
    HCONF_FILES:=include/my_header.h src/my_sauce.c
    HCONF_CACHES:=
    include $(HTOOLS_PATH)/hgmake/hconf.mk
include/my_header.h:
    #ifndef MY_HEADER_H
    #define MY_HEADER_H
    #include <hconf/include/my_header.h>
    #if defined(HCONF_MY_WAY)
    # define PRIz "d"
    #elif defined(HCONF_THE_OTHER_WAY)
    # defined PRIz "z"
    #else
    # error Not hconf:ed.
    #endif
    #define HCONF_TEST printf("%"PRIz, (size_t)0)
    #endif
src/my_sauce.c:
    #include <hconf/src/my_sauce.h>
    #if defined(HCONF_OH_RLY)
    # /* CPPFLAGS=_BSD_SOURCE */
    # include <exotic/system/header.h>
    void this_rly_my_function() { ... }
    #elif defined(HCONF_YA_RLY)
    # include <adventurous/system/header.h>
    void no_this_rly_my_function() { ... }
    #else
    # error Not hconf:ed.
    #endif
The result after running GNU make could be:
 *) $(BUILD_DIR)/hconf.cache
    ccache gcc
    -D_BSD_SOURCE
    -Wall
    <empty>
    <empty>
 *) $(BUILD_DIR)/hconf/include/my_header.h
    ...
    #define HCONF_MY_WAY
    #include <include/my_header.h>
    ...
 *) $(BUILD_DIR)/hconf/src/my_sauce.h
    ...
    #define HCONF_YA_RLY
    ...

Notice that it's a good idea to keep the hconf branch names descriptive and
unique to avoid namespace collisions.
