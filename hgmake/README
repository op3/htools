 Copyright (c) 2015-2016 Hans Toshihide TÃ¶rnqvist <hans.tornqvist@gmail.com>

 Permission to use, copy, modify, and/or distribute this software for any
 purpose with or without fee is hereby granted, provided that the above
 copyright notice and this permission notice appear in all copies.

 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


hgmake - GNU make tools
=======================

A collection of tools and snippets to make GNU make even more makeable. Note
that some constructs look old, but they are required for ancient platforms
that I must support at work (GNU make 3.78, gcc 2.9).


build_dir.mk
------------
Creates a nice build directory name, which involves adjusting BUILD_MODE.

include build_dir.mk

BUILD_DIR now has the nice name, and BUILD_MODE will be "debug" by default.


good_flags.mk
-------------
Good set of flags for GCC, some to push you towards the fatal edge of your
chair, while others aim to make you smile uncontrollably.


hconf*
------
An "approach" to autoconfing things which tries to solve the following things:
 *) No separate phase.
    Everything is done with make, including use of dependency rules.
 *) Much simpler macro guards.
    Bye-bye to: #ifdef __linux__ && GNUC_BLABLA
    Hello to:   #if HCONF_M_MYMODULE
                # if HCONF_B_MYBRANCH
    hconf will test HCONF guards top-down until one compiles perfectly and
    optionally links as well as possible.
 *) Production code rather than special test code tested, although a
    HCONF_TESTING macro is defined while configuring.
 *) Parallel processing.
    make -j

Overview of important project files:
 *) hconf.mk
    A bunch of commands and recipes for creating and using hconfs.
 *) <build_dir>/hconf_conf [-v] build-dir file hconf-files...
    Scans for preprocessor modules and branches, tries to compile and link,
    and writes the results to an hconf file.
 *) <build_dir>/hconf_merge hconf-files...
    Merges flags from a list of hconf files to stdout.

How to create an hconf:ed file:

 *) Create a header file with switches:
    include/myheader.h:
#include <hconf/include/myheader.h>
#if HCONF_MODULE(MY_MODULE)
#	if HCONF_BRANCE(MY_BRANCH_1)
#		include <string.h>
#	elif HCONF_BRANCH(DEUX)
/* HCONF_CPPFLAGS=-D_BSD_SOURCE */
#		include <string.h>
#	elif HCONF_BRANCH(SAN)
char *strndup(char const *, size_t);
#	endif
/* Optional test to be run by hconf. */
#	if HCONF_TESTING
void
hconf_test(char const *const a_str, size_t const a_siz)
{
	return strndup(a_str, a_siz);
}
#	endif
#endif

 *) List hconf:able files and include hconf.mk:
    Makefile:
     HCONF_FILES=include/myheader.h
     include $(HTOOLS_PATH)/hgmake/hconf.mk
    In short, this runs:
     for i in $(HCONF_FILES)
     do
      ./hconf_conf [-v] $(BUILD_DIR) $i
      ./hconf_merge $(HCONF_RESULT) > $(HCONF_RESULT)
     done
    to create a big hconf file with merged compiler options.

 *) Create dependencies on hconf results:
    Makefile:
     %.o: %.c $(HCONF_RESULT)

 *) You should get the chosen branches in a generated header file:
    $(BUILD_DIR)/hconf/include/myheader.h:
     #ifndef HCONF_INCLUDE_MYHEADER_H
     #define HCONF_INCLUDE_MYHEADER_H
     #define HCONF_MODULE_MY_MODULE 1
     #define HCONF_BRANCH_DEUX 1
     #endif
 *) ... and compiler/linker flags in the hconf file:
    $(BUILD_DIR)/hconf/include/myheader.hconf:
     -D_BSD_SOURCE # CPPFLAGS
                   # CFLAGS
                   # LDFLAGS
                   # LIBS

 *) In order to use hconf results from another project:
    Makefile:
     HCONF_EXTERNAL:=path/to/project
     include $(HTOOLS_PATH)/hgmake/hconf.mk
    hconf.mk will append $(BUILD_DIR) and the hconf result filename, plus add
    the appropriate include path.

Notes:

*) hconf.mk should be included only once.

*) hconf.mk contains rules, so put your default rule before.

*) Branches are put into a generated header file rather than into the hconf
file, to reduce command line arguments.
