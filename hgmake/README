 Copyright (c) 2015-2017 Hans Toshihide TÃ¶rnqvist <hans.tornqvist@gmail.com>

 Permission to use, copy, modify, and/or distribute this software for any
 purpose with or without fee is hereby granted, provided that the above
 copyright notice and this permission notice appear in all copies.

 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


hgmake - GNU make tools
=======================

A collection of tools and snippets to make building with GNU make
"comfortable". It's impossible to create a pretty build system, but this is my
least painful approach.

build_dir.mk     - Creates a reasonable build directory path if not set.
gcov.mk          - Gcov summary tools.
hconf.mk         - Hconf tools, for in-make build configuration.
strict_cflags.mk - Wonderful CFLAGS for good source code.

Each mk snipped contains information about inputs and outputs. As always:
RTFC >> RTFM.


hconf*
------
This requires a bit more than a one-liner description...

An "approach" to autoconfing things which tries to solve the following things:
 *) No separate phase.
    Everything is done with make, including use of dependency rules.
 *) Much simpler macro guards.
    Bye-bye to: #ifdef __linux__ && GNUC_BLABLA
    Hello to:   #if HCONF_MODULE(MYMODULE, MYBRANCH)
    hconf will test HCONF guards top-down until one compiles and optionally
    links perfectly.
 *) Production code rather than special test code tested, although a
    HCONFING_* macro is defined while configuring.

Overview of important project files:
 *) hconf.mk
    A bunch of commands and recipes for creating and using hconfs.
 *) <build_dir>/hconf_conf [-v] -d build-dir -i file -h hconf-file
    Scans for preprocessor modules and branches, tries to compile and link,
    and writes the results to an hconf file.
 *) <build_dir>/hconf_merge hconf-files...
    Merges flags from a list of hconf files to stdout.

Commented example:


--- include/myheader.h ------------------------------------------------------
/*
 * The following header will be generated during hconf:ing and will contain
 * the macro for the hconf:ed branch.
 */
#include <hconf/include/myheader.h>

#if HCONF_MODULE(VEGETABLE, COW)
/* One possible branch, this will probably fail. */
#	include <cow_is_vegetable.h>
#elif HCONF_MODULE(VEGETABLE, CARROT)
/* Another branch more likely to pass. */
#	include <string.h>
#endif

#if HCONFING(VEGETABLE)
/*
 * Define the following macro to actually execute the test, by default it will
 * only be compiled and linked.
 */
/*#define HCONF_TEST_RUN*/
/* This test function looks like "int test(int i)" and i is always 0. */
HCONF_TEST
{
	return strcmp("carrot", "carrot") + i;
}
#endif


--- Makefile ----------------------------------------------------------------
/* build_dir.mk gives BUILD_DIR a nice directory name, use it. */
include $(HTOOLS_PATH)/hgmake/build_dir.mk
/* 
CPPFLAGS+=-Iinclude -I$(BUILD_DIR)

.PHONY: all
all:
	echo Whatever goes here.

/* List your source code to be hconf:ed. */
HCONF_SRC=include/myheader.h
/* If you'd like to use another hconf:ed projects results, list them. */
/*HCONF_PROJECTS=$(HTOOLS_PATH)/hutils*/
/*
 * This is where the hconf magic happens. It's all open source, so please have
 * a look! Note that it contains rules, so put your default target before,
 * like in this example.
 */
include $(HTOOLS_PATH)/hgmake/hconf.mk

/* CC_O comes from hconf.mk and will grab hconf:ed info for you. */
$(BUILD_DIR)/%.o: %.c $(HCONF_CACHE)
	$(CC_O)

/* Touching Makefile might mean new branches are chosen. */
$(HCONF_CACHE): Makefile


--- Summary -----------------------------------------------------------------
Building this will generate the header files $(BUILD_DIR)/hconf/$(HCONF_SRC)
and, for debugging purposes, an hconf file for each hconf:ed file, containing
the compiler and flags. There will also be temporary files in
$(BUILD_DIR)/_hconf/ for even more debugging purposes.

Any auto-config approach is tricky and involved, so try and have a look!
